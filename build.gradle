// Release command:
// $ gradle clean build zip # (optionally 'publish' to release new version in Maven repository)

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'jacoco'

group = 'io.macronova.kafka'
version = '1.0.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
	mavenCentral()
}

sourceSets {
	examples {
		java.srcDir file( 'src/examples/java' )
		resources.srcDir file( 'src/examples/resources' )
		compileClasspath += sourceSets.main.output + configurations.compileOnly
		runtimeClasspath += output + compileClasspath
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled false
	}
}

check.dependsOn jacocoTestReport

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom {
				name = 'Kafka SerDe Extensions'
				description = 'Extensions to Kafka serializers and deserializers.'
				url = 'https://github.com/macronova/kafka-serde-ext'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'Macronova'
						name = 'Macronova'
						email = 'office@macronova.io'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/macronova/kafka-serde-ext.git'
					developerConnection = 'scm:git:ssh://github.com:macronova/kafka-serde-ext.git'
					url = 'https://github.com/macronova/kafka-serde-ext'
				}
			}
		}
	}
	repositories {
		maven {
			credentials {
				username project.hasProperty( 'ossrhUsername' ) ? project.property( 'ossrhUsername' ) : ''
				password project.hasProperty( 'ossrhPassword' ) ? project.property( 'ossrhPassword' ) : ''
			}
			url = version.endsWith('SNAPSHOT') ? "$buildDir/repos/snapshots" : "$buildDir/repos/releases"
			// url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}

dependencies {
	compile 'org.bouncycastle:bcprov-jdk15on:1.60'
	compileOnly 'org.apache.kafka:kafka-clients:1.1.0'
	compileOnly 'org.slf4j:slf4j-nop:1.7.25'

	testCompile 'junit:junit:4.12'
	testCompile 'org.bouncycastle:bcpkix-jdk15on:1.60' // Used for keystore with RSA key pair generation.
	testCompile 'org.apache.kafka:kafka_2.11:1.1.0'
	testCompile 'org.assertj:assertj-core:3.10.0'
	testCompile 'org.springframework.kafka:spring-kafka:2.1.9.RELEASE'
	testCompile 'org.springframework.kafka:spring-kafka-test:2.1.9.RELEASE'
}

// Create fat-JAR with all required dependencies.
//jar {
//	from {
//		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//	}
//}

task zip(type: Zip) {
	from configurations.runtime.allArtifacts.files
	from configurations.runtime
	into (project.name + '-' + project.version)
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.10.2'
}

idea {
	module {
		sourceDirs += file( 'src/examples/java' )
		resourceDirs += file( 'src/examples/resources' )
	}
}